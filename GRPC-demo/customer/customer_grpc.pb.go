// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: customer/customer.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerserviceClient is the client API for Customerservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerserviceClient interface {
	InsertCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error)
	GetCustomerDetails(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*CustomerDetails, error)
}

type customerserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerserviceClient(cc grpc.ClientConnInterface) CustomerserviceClient {
	return &customerserviceClient{cc}
}

func (c *customerserviceClient) InsertCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/customer.Customerservice/InsertCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerserviceClient) GetCustomerDetails(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*CustomerDetails, error) {
	out := new(CustomerDetails)
	err := c.cc.Invoke(ctx, "/customer.Customerservice/GetCustomerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerserviceServer is the server API for Customerservice service.
// All implementations must embed UnimplementedCustomerserviceServer
// for forward compatibility
type CustomerserviceServer interface {
	InsertCustomer(context.Context, *Customer) (*CustomerResponse, error)
	GetCustomerDetails(context.Context, *CustomerID) (*CustomerDetails, error)
	mustEmbedUnimplementedCustomerserviceServer()
}

// UnimplementedCustomerserviceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerserviceServer struct {
}

func (UnimplementedCustomerserviceServer) InsertCustomer(context.Context, *Customer) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCustomer not implemented")
}
func (UnimplementedCustomerserviceServer) GetCustomerDetails(context.Context, *CustomerID) (*CustomerDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerDetails not implemented")
}
func (UnimplementedCustomerserviceServer) mustEmbedUnimplementedCustomerserviceServer() {}

// UnsafeCustomerserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerserviceServer will
// result in compilation errors.
type UnsafeCustomerserviceServer interface {
	mustEmbedUnimplementedCustomerserviceServer()
}

func RegisterCustomerserviceServer(s grpc.ServiceRegistrar, srv CustomerserviceServer) {
	s.RegisterService(&Customerservice_ServiceDesc, srv)
}

func _Customerservice_InsertCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerserviceServer).InsertCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Customerservice/InsertCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerserviceServer).InsertCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customerservice_GetCustomerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerserviceServer).GetCustomerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.Customerservice/GetCustomerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerserviceServer).GetCustomerDetails(ctx, req.(*CustomerID))
	}
	return interceptor(ctx, in, info, handler)
}

// Customerservice_ServiceDesc is the grpc.ServiceDesc for Customerservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Customerservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.Customerservice",
	HandlerType: (*CustomerserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCustomer",
			Handler:    _Customerservice_InsertCustomer_Handler,
		},
		{
			MethodName: "GetCustomerDetails",
			Handler:    _Customerservice_GetCustomerDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/customer.proto",
}
